formulas:
  # Monster image with type fallback
  MonsterImage: |
    js:
    if (target.image_path) {
      return `![[${target.image_path}|120]]`;
    } else if (target.type) {
      const typeMap = {
        'aberration': 'Aberration',
        'beast': 'Beast',
        'celestial': 'Celestial',
        'construct': 'Construct',
        'dragon': 'Dragon',
        'elemental': 'Elemental',
        'fey': 'Fey',
        'fiend': 'Fiend',
        'giant': 'Giant',
        'humanoid': 'Humanoid',
        'monstrosity': 'Monstrosity',
        'ooze': 'Ooze',
        'plant': 'Plant',
        'undead': 'Undead'
      };
      const imgType = typeMap[target.type] || 'Monster';
      return `![[z_Assets/Placeholder Images/${imgType}.png|120]]`;
    }
    return `![[z_Assets/Placeholder Images/Monster_Default.png|120]]`;
  
  # CR Display with color coding
  CRDisplay: |
    js:
    if (target.cr) {
      const cr = parseFloat(target.cr);
      let color = '#808080';
      if (cr >= 20) color = '#FF0000';
      else if (cr >= 15) color = '#FF4500';
      else if (cr >= 10) color = '#FFA500';
      else if (cr >= 5) color = '#FFD700';
      else if (cr >= 1) color = '#90EE90';
      else color = '#00FF00';
      return `<span style="color: ${color}; font-weight: bold;">CR ${target.cr}</span>`;
    }
    return '<span style="color: #808080;">CR ?</span>';
  
  # Size and type display
  SizeType: |
    js:
    const parts = [];
    if (target.size) parts.push(target.size);
    if (target.type) parts.push(target.type);
    if (target.subtype) parts.push(`(${target.subtype})`);
    return parts.join(' ') || 'Unknown creature';
  
  # Environment tags
  Environments: |
    js:
    if (target.environment && Array.isArray(target.environment)) {
      return target.environment.map(env => `üåç ${env}`).join(' ');
    }
    return 'üåç Any';
  
  # Combat stats summary
  CombatStats: |
    js:
    const stats = [];
    if (target.ac) stats.push(`AC ${target.ac}`);
    if (target.hp) stats.push(`HP ${target.hp}`);
    if (target.speed) stats.push(target.speed);
    return stats.join(' ‚Ä¢ ') || 'No stats';
  
  # Legendary status
  LegendaryStatus: |
    js:
    if (target.legendary) return '‚≠ê Legendary';
    if (target.mythic) return 'üåü Mythic';
    if (target.unique) return 'üëë Unique';
    return '';

views:
  - type: gallery
    name: Monster Gallery
    filters:
      and:
        - folder.startsWith("3-Mechanics/CLI/bestiary")
    columns: 4
    properties:
      - formula.MonsterImage
      - file.name
      - formula.CRDisplay
      - formula.SizeType
      - formula.CombatStats
    
  - type: table
    name: Encounter Builder
    filters:
      and:
        - cr
    order:
      - formula.CRDisplay
      - formula.MonsterImage
      - file.name
      - formula.SizeType
      - formula.Environments
      - formula.LegendaryStatus
      - formula.CombatStats
    sort:
      - column: cr
        direction: ASC
      - column: file.name
        direction: ASC
    columnSize:
      formula.CRDisplay: 80
      formula.MonsterImage: 130
      file.name: 180
      formula.SizeType: 150
      formula.Environments: 150
      formula.LegendaryStatus: 100
      formula.CombatStats: 200
    
  - type: cards
    name: Boss Gallery
    filters:
      and:
        - anyOf:
            - legendary
            - mythic
            - unique
            - cr.gte(15)
    columns: 3
    properties:
      - formula.MonsterImage
      - file.name
      - formula.CRDisplay
      - formula.LegendaryStatus
      - formula.SizeType
      - formula.CombatStats
    
  - type: gallery
    name: By Environment
    filters:
      and:
        - environment.contains("{{env}}")
    columns: 5
    properties:
      - formula.MonsterImage
      - file.name
      - formula.CRDisplay
    parameters:
      env:
        type: select
        options:
          - Arctic
          - Coastal
          - Desert
          - Forest
          - Grassland
          - Hill
          - Mountain
          - Swamp
          - Underdark
          - Underwater
          - Urban 